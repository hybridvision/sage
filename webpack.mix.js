// Setup
const proxyURL = 'wordpress.test'; // Local URL used for proxying with BrowserSync
const themeSlug = 'sage'; // Theme folder name

const mix = require('laravel-mix');
const { whitelist, whitelistPatterns } = require('purgecss-with-wordpress');

// Mix plugins
require('mix-tailwindcss');
require('laravel-mix-purgecss');

// Public path helper
const publicPath = path => `${mix.config.publicPath}/${path}`;

// Source path helper
const src = path => `resources/assets/${path}`;


// Public Path
mix
  .setPublicPath('./dist')
  .setResourceRoot(`/wp-content/themes/${themeSlug}/${mix.config.publicPath}/`)
  .webpackConfig({
    output: { publicPath: mix.config.resourceRoot }
  });

// Browsersync
mix.browserSync({
  proxy: proxyURL,
  open: false,
});

// Styles
mix.stylus(src`styles/app.styl`, 'styles', {
  use: [
    require('rupture')()
  ]
}).options({
    postCss: [
      require('lost'),
    ]
  })
  .tailwind();

// JavaScript
mix.js(src`scripts/app.js`, 'scripts')
   .js(src`scripts/customizer.js`, 'scripts')
   .extract();

// Assets
mix.copyDirectory(src`images`, publicPath`images`)
   .copyDirectory(src`fonts`, publicPath`fonts`);

// Options
mix.options({
  processCssUrls: false,
});

// Generate source maps when not in production
mix.sourceMaps(false, 'source-map');

// Hash and version files in production
mix.version();

// Remove unused styles in production
mix.purgeCss({
  content: [
    './resources/views/**/*.php',
    './resources/assets/**/*.js',
  ],
  defaultExtractor: content => content.match(/[A-Za-z0-9-_:/]+/g) || [],

  /*
   | Add classes, IDs, or selectors that which do not exist in your views or
   | scripts. By default, We have whitelisted classes generated by WordPress.
   */
  whitelist: [
    ...whitelist,
  ],
  whitelistPatterns: [
    ...whitelistPatterns,
  ],
});
